Process:
It is an instance of a program that gets executed.
It has its own  resource like memory, thread etc. OS allocates these resources to process when its executed.
Two processes never share memory or resources  with each other. They should have their own resources.
One process can have multiple threads.
A process gets created when the program gets executed.


Threads:
They are also known as lightweight process.
Smallest sequence of instructions that are executed by cpu independently.

When a process is created, it starts with 1 thread  and that initial thread is knows as 'main thread'.
Using the main thread we can create multiple threads to perform task concurrently.
Allows a program to perform multiple operations at the same time.
Multiple threads share the same resource such as memory space but still can perform tasks individually.


JVM has the following components:
- Heap memory
- Stack memory
- Registers
- Code segment
- Program Counters


For each process a new jvm instance is created.
Each thread has its own stack and each thread has its own register.

Pros of multithreading
- Responsiveness
- Resource sharing
- Improved performance by task parallelism.

Challenges:
- Issues like deadlock, data inconsistency etc.
- Synchronized overhead.
- Testing and debugging is difficult.

Multithreading there is a sharing of resources.

When a program executes multiple process by context switching and when there is no resource sharing between ,
the two processes then it is called as multitasking.


When a program is run then a new process is created and then a nw jvm instance is created and is allocated to that process
JVM has the following components:
- Heap memory
- Stack memory
- Registers
- Code segment
- Program Counters


We can define the amount of memory that jvm instance can use form the heap memory
java -Xms256ms -Xmx2g MainClassName

Register, Stack abd Counter are different for each thread Data segment is shared with all threads in the process.

Code segment is ead only.


Heap is shared among all the thread ins the same process. However they are not shared mount the threads in different processes.


Thread Lifecycle
1) new - When a thread is created then the thread enters the creation phase and the thread is not yet started
2) Runnable - When the thread starts running i.e when we call the start method then the thread enters the runnable state .
In this state it puts the monitor lock.

3) Terminated - When  the thread finishes execution then t enters into the terminated state. Once a thread enters nto the terminated state
it is impossible to enter the runnable state again.

4) Blocked - Imagine when a thread is in a runnable state and it need to perform an operation which requires it to read or do some i.o operation
then the thread will enter the blocked state when the operation gets finished then the thread will go back to runnable state.
Blocked state is initiated internally.
If a thread has to lock on an a resource which is locked by other thread, then it has to wait.
Releases al the monitor locks


5) Waiting: We can explicitly call the wait method and make the thread to wait state. We can call the notify method to switch state back to runnable.
Releases all the monitor locks

6) Timed Waiting: We can explicitly determine the time for which the thread will be on the wait state once the time limit is
expired then the thread will got back to the runnable state.
Will not release the monitor locks.


Monitor lock:
It helps to make sure that only 1 thread goes inside the particular section of code (synchronized block or method)

When a method has synchronized keyword then only one thread will enter the method. Howeer each object will have ots own monitpr lock.

When we have different threads working on the same object then in the synchronized block only one thread can enter.
This happens because the object has only 1 monitor lock.

However if the 2 threads were working on different objects then the threads can enter the synchronized block at the same time
as each object will have its own monitor lock.

stop() - Terminates the thread abruptly. No locks are released and no resource clean up happens.
suspend() - Put the thread on hold or suspended temporarily. No locks are released.
resume()  -  Used to resume the execution of the terminated thread.


join() - When a join method is invoked on a thread object . Current thread will be blocked and waits for the specific thread to be finished.
It is helpful when we want to coordinate between threads or to ensure complete certain task before moving ahead.


Even if we set the thread priority id does not guarantee to follow a specific order.
1 is lowest
10 is highest

5 is the default priority


Daemon: Anything which is running in an async manner.

There are two different kinds of threads
1) Daemon
2) User


A daemon thread is alive till any 1 user thread is alive. If all threads are finished execution
then the daemon treads will also stop.


The jvm garbage collector is a daemon  thread. auto  save is also a daemon thread.
A daemon thread is a thread that runs in the background and provides services to other threads.
It does not have its own life cycle and is terminated when all user threads finish executing.


Custom Locks
- Stamped
- Semaphores
- Reentrant
- Read Write

Reentrant Locks - If we have different objects and if we want only one thread to enter or access the code then we make use of reentrant locks

Read Write locks -

Read  Lock -  More than 1 thread can acquire the read lock is similar to Shared lock.
Multiple threads can out a shared lock on a resource, then no other thread can acquire an exclusive lock.
With a shared lock you can only read


Write Lock - Only 1 thread can acquire the write lock is similar to exclusive lock Similar to exclusive lock.
With an exclusive lock the thread can read/write

If an exclusive lock is taken by any thread then no exclusive ot shared lock can be taken.

Read Write locks are used when read are very high as compared to your writes.


Stamped Lock -
Provides read/write lock property
Also provides optimistic reads.

Different kinds of locks
1) Pessimistic - All locks lke monitor, reentrant, readwrite are all pessimistic locks
2) Optimistic -

In Optimistic there is no lock acquired.


Semaphore Lock:
It allows a particular thread to go o=inside a particular section works similar to reentrant lock
but has the additional benefit of allowing multiple threads to access a particular part if code.

Semaphores can be used for connection pools.

await()  -  Is similar to wait()
signal() -  Is similar to notify()

These methods are only available for custom locks



Concurrency can be achieved
1) lock based - Synchronized, Reentrant, Stamped, Read/Write, Semaphores
2) Lock free - CAS (Compare and swap)
 - Atomic Integer
 - Atomic Boolean
 - Atomic Long
 - Atomic Reference

 Optimistic concurrency is a lock free protocol


CAS is a low level operation
Its atomic
All modern processors support it

CAS has 3 major parameters
- Memory Location: Location where memory is stored.
- Expected value: Value which should be present as the memory.
- New Value: value to be written.























































